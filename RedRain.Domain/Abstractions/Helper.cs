using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RedRain.Domain.Common;

namespace RedRain.Domain.Abstractions
{
    public class Helper
    {
        public static GenericResult Response(int statusCode, object data)
        {
            return statusCode switch
            {
                100 => new GenericResult(100, true, "Continue",
                    "An interim response. Indicates the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed.",
                    data),
                101 => new GenericResult(101, true, "Switching",
                    "Sent in response to an Upgrade request header from the client, and indicates the protocol the server is switching to.",
                    data),
                102 => new GenericResult(102, true, "Processing (WebDAV)",
                    "Indicates that the server has received and is processing the request, but no response is available yet.",
                    data),
                103 => new GenericResult(103, true, "Processing (WebDAV)",
                    "Indicates that the server has received and is processing the request, but no response is available yet.",
                    data),
                200 => new GenericResult(200, true, "OK", "Indicates that the request has succeeded.", data),
                201 => new GenericResult(201, true, "Created",
                    "Indicates that the request has succeeded and a new resource has been created as a result.", data),
                202 => new GenericResult(202, true, "Accepted",
                    "Indicates that the request has been received but not completed yet.It is typically used in log running requests and batch processing.",
                    data),
                203 => new GenericResult(203, true, "Non-Authoritative Information",
                    "Indicates that the returned metainformation in the entity-header is not the definitive set as available from the origin server, but is gathered from a local or a third-party copy. The set presented MAY be a subset or superset of the original version.",
                    data),
                204 => new GenericResult(204, true, "No Content",
                    "The server has fulfilled the request but does not need to return a response body. The server may return the updated meta information.",
                    data),
                205 => new GenericResult(205, true, "Reset Content",
                    "Indicates the client to reset the document which sent this request.", data),
                206 => new GenericResult(206, true, "Partial Content",
                    "It is used when the Range header is sent from the client to request only part of a resource.",
                    data),
                207 => new GenericResult(207, true, "Multi-Status (WebDAV)",
                    "An indicator to a client that multiple operations happened, and that the status for each operation can be found in the body of the response.",
                    data),
                208 => new GenericResult(208, true, "Already Reported (WebDAV)",
                    "Allows a client to tell the server that the same resource (with the same binding) was mentioned earlier. It never appears as a true HTTP response code in the status line, and only appears in bodies.",
                    data),
                226 => new GenericResult(226, true, "IM Used",
                    "The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.",
                    data),
                300 => new GenericResult(300, true, "Multiple Choices",
                    "The request has more than one possible response. The user-agent or user should choose one of them.",
                    data),
                301 => new GenericResult(301, true, "Moved Permanently",
                    "The URL of the requested resource has been changed permanently. The new URL is given by the Location header field in the response. This response is cacheable unless indicated otherwise.",
                    data),
                302 => new GenericResult(302, true, "Found",
                    "The URL of the requested resource has been changed temporarily.The new URL is given by the Location field in the response.This response is only cacheable if indicated by a Cache - Control or Expires header field.",
                    data),
                303 => new GenericResult(303, true, "See Other",
                    "The response can be found under a different URI and SHOULD be retrieved using a GET method on that resource.",
                    data),
                304 => new GenericResult(304, true, "Not Modified",
                    "Indicates the client that the response has not been modified, so the client can continue to use the same cached version of the response.",
                    data),
                305 => new GenericResult(305, true, "Use Proxy (Deprecated)",
                    "Indicates that a requested response must be accessed by a proxy.", data),
                306 => new GenericResult(306, true, "(Unused)", "It is a reserved status code and is not used anymore.",
                    data),
                307 => new GenericResult(307, true, "Temporary Redirect",
                    "Indicates the client to get the requested resource at another URI with same method that was used in the prior request. It is similar to 302 Found with one exception that the same HTTP method will be used that was used in the prior request.",
                    data),
                308 => new GenericResult(308, true, "Permanent Redirect (experimental)",
                    "Indicates that the resource is now permanently located at another URI, specified by the Location header. It is similar to 301 Moved Permanently with one exception that the same HTTP method will be used that was used in the prior request.",
                    data),
                400 => new GenericResult(400, false, "Bad Request",
                    "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications.",
                    data),
                401 => new GenericResult(401, false, "Unauthorized",
                    "Indicates that the request requires user authentication information. The client MAY repeat the request with a suitable Authorization header field.",
                    data),
                402 => new GenericResult(402, false, "Forbidden",
                    "Reserved for future use. It is aimed for using in the digital payment systems.",
                    data),
                403 => new GenericResult(403, false, "Payment Required (Experimental)",
                    "Unauthorized request. The client does not have access rights to the content. Unlike 401, the client’s identity is known to the server.",
                    data),
                404 => new GenericResult(404, false, "Not Found",
                    "The server can not find the requested resource.",
                    data),
                412 => new GenericResult(412, false, "Precondition Failed",
                    "The client has indicated preconditions in its headers which the server does not meet.",
                    data),
                428 => new GenericResult(428, false, "Precondition Required",
                    "The origin server requires the request to be conditional.",
                    data),
                429 => new GenericResult(429, false, "Too Many Requests",
                    "The user has sent too many requests in a given amount of time ('rate limiting').",
                    data),
                500 => new GenericResult(500, true, "Internal Server Error",
                    "The server encountered an unexpected condition which prevented it from fulfilling the request.",
                    data),
                _ => new GenericResult(500, true, "Internal Server Error",
                    "The server encountered an unexpected condition which prevented it from fulfilling the request.",
                    data)
            };
        }
    }
}
